// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pagerank.proto

#ifndef PROTOBUF_pagerank_2eproto__INCLUDED
#define PROTOBUF_pagerank_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace pagerank {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pagerank_2eproto();
void protobuf_AssignDesc_pagerank_2eproto();
void protobuf_ShutdownFile_pagerank_2eproto();

class pao;

// ===================================================================

class pao : public ::google::protobuf::Message {
 public:
  pao();
  virtual ~pao();
  
  pao(const pao& from);
  
  inline pao& operator=(const pao& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const pao& default_instance();
  
  void Swap(pao* other);
  
  // implements Message ----------------------------------------------
  
  pao* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pao& from);
  void MergeFrom(const pao& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // required float rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline float rank() const;
  inline void set_rank(float value);
  
  // repeated string links = 3;
  inline int links_size() const;
  inline void clear_links();
  static const int kLinksFieldNumber = 3;
  inline const ::std::string& links(int index) const;
  inline ::std::string* mutable_links(int index);
  inline void set_links(int index, const ::std::string& value);
  inline void set_links(int index, const char* value);
  inline void set_links(int index, const char* value, size_t size);
  inline ::std::string* add_links();
  inline void add_links(const ::std::string& value);
  inline void add_links(const char* value);
  inline void add_links(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& links() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_links();
  
  // @@protoc_insertion_point(class_scope:pagerank.pao)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_rank();
  inline void clear_has_rank();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* key_;
  ::google::protobuf::RepeatedPtrField< ::std::string> links_;
  float rank_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_pagerank_2eproto();
  friend void protobuf_AssignDesc_pagerank_2eproto();
  friend void protobuf_ShutdownFile_pagerank_2eproto();
  
  void InitAsDefaultInstance();
  static pao* default_instance_;
};
// ===================================================================


// ===================================================================

// pao

// required bytes key = 1;
inline bool pao::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pao::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pao::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pao::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& pao::key() const {
  return *key_;
}
inline void pao::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void pao::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void pao::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pao::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* pao::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required float rank = 2;
inline bool pao::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pao::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pao::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pao::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline float pao::rank() const {
  return rank_;
}
inline void pao::set_rank(float value) {
  set_has_rank();
  rank_ = value;
}

// repeated string links = 3;
inline int pao::links_size() const {
  return links_.size();
}
inline void pao::clear_links() {
  links_.Clear();
}
inline const ::std::string& pao::links(int index) const {
  return links_.Get(index);
}
inline ::std::string* pao::mutable_links(int index) {
  return links_.Mutable(index);
}
inline void pao::set_links(int index, const ::std::string& value) {
  links_.Mutable(index)->assign(value);
}
inline void pao::set_links(int index, const char* value) {
  links_.Mutable(index)->assign(value);
}
inline void pao::set_links(int index, const char* value, size_t size) {
  links_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pao::add_links() {
  return links_.Add();
}
inline void pao::add_links(const ::std::string& value) {
  links_.Add()->assign(value);
}
inline void pao::add_links(const char* value) {
  links_.Add()->assign(value);
}
inline void pao::add_links(const char* value, size_t size) {
  links_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
pao::links() const {
  return links_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
pao::mutable_links() {
  return &links_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pagerank

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pagerank_2eproto__INCLUDED
